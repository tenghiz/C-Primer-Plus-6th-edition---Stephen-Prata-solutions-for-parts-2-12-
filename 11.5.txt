======================= main.cpp =====================

// 11.5 - Rewrite Stone class 

// Overloaded operators: + - * / 
// Friends: * <<

#include <iostream>
using namespace std;
#include "stonewt.h"

int main()
{
	Stonewt incognito(217.5, Stonewt::POUNDS); // uses constructor to initialize
	cout << incognito;
	Stonewt bursa(144.2, Stonewt::FLOAT);
	cout << bursa;
	bursa.stone_mode();
	incognito.stone_mode();
	cout << incognito;
	cout << bursa;
	Stonewt culba = incognito + bursa;
	cout << culba;
	Stonewt mucha = incognito - bursa;
	cout << mucha;
	mucha = 0.2*mucha;
	cout << mucha;
	cout << mucha*5.1;
	mucha.float_mode();
	cout << mucha;
	incognito.float_mode();
	cout << incognito;
	incognito.pound_mode();
	cout << incognito;
	incognito.stone_mode();
	cout << incognito;
	incognito = incognito/100;
	incognito.float_mode();
	cout << incognito;
	incognito.pound_mode();
	cout << incognito;
	incognito.stone_mode();
	cout << incognito;
	return 0;
}


==================== *.h =============================

#pragma once

// stonewt.h -- definition for the Stonewt class

#ifndef STONEWT_H_
#define STONEWT_H_

class Stonewt
{
public:
	enum Mode {STONES, POUNDS, FLOAT};
private:
	enum { Lbs_per_stn = 14 }; // pounds per stone
	int stone; // whole stones
	double pds_left; // fractional pounds
	int pounds; // entire weight in pounds
	Mode mode;
public:
	Stonewt(double x, Mode form = STONES); 
	Stonewt(); // default constructor
	~Stonewt();
	void show_lbs() const; // show weight in pounds format
	void show_stn() const; // show weight in stone format

	void stone_mode();
	void pound_mode();
	void float_mode();

	friend std::ostream & operator<<(std::ostream & os, const Stonewt & st);
	
	Stonewt operator+(const Stonewt & st) const;
	Stonewt operator-(const Stonewt & st) const;
	Stonewt operator*(double x);
	friend Stonewt operator*(double x, const Stonewt & st);
	Stonewt operator/(double x);
};

#endif


=============================== *.cpp ========================

// stonewt.cpp -- Stonewt methods

#include <iostream>
using namespace std;
#include "stonewt.h"

// construct Stonewt object from double value
Stonewt::Stonewt(double x, Mode form)
{
	mode = form;
	if (form == STONES)
	{
		stone = int(x+0.5);//round to closes bigger integer
		pounds = int(x*Lbs_per_stn);
		pds_left = x*Lbs_per_stn;
	}
	else if (form == POUNDS)
	{
		stone = int(x/Lbs_per_stn);
		pounds = int(x+0.5);//round to closes bigger integer
		pds_left = x;
	}
	else if (form == FLOAT)
	{
		stone = int(x / Lbs_per_stn);
		pounds = int(x + 0.5);
		pds_left = x;
	}
}

Stonewt::Stonewt() // default constructor, wt = 0
{
	stone = pounds = pds_left = 0;
}

Stonewt::~Stonewt() // destructor
{ }

std::ostream & operator<<(std::ostream & os, const Stonewt & st)
{
	if (st.mode == Stonewt::STONES)
		os << "Weight in stones: " << st.stone << endl;
	else if (st.mode == Stonewt::POUNDS)
		os << "Weight in pounds: " << st.pounds << endl;
	else if (st.mode == Stonewt::FLOAT)
		os << "Weight in pounds with floating point: " << st.pds_left << endl;
	return os;
}

void Stonewt::stone_mode()
{
	mode = STONES;
}

void Stonewt::pound_mode()
{
	mode = POUNDS;
}

void Stonewt::float_mode()
{
	mode = FLOAT;
}

Stonewt Stonewt::operator+(const Stonewt & st) const
{
	return Stonewt(st.stone + stone);
}

Stonewt Stonewt::operator-(const Stonewt & st) const
{
	return Stonewt(stone- st.stone);
}

Stonewt operator*(double x, const Stonewt & st)
{
	return st.stone*x;
}

Stonewt Stonewt::operator*(double x)
{
	return stone*x;
}

Stonewt Stonewt::operator/(double x)
{
	return stone/x;
}