=========== *.h ===============
//unchanged

#pragma once

#ifndef QUEUE_H_
#define QUEUE_H_

// This queue will contain Customer items
class Customer
{
private:
	long arrive; // arrival time for customer
	int processtime; // processing time for customer
public:
	Customer() { arrive = processtime = 0; }
	void set(long when);
	long when() const { return arrive; }
	int ptime() const { return processtime; }
};

typedef Customer Item;

class Queue
{
private:
	// class scope definitions
	// Node is a nested structure definition local to this class
	struct Node { Item item; struct Node * next; };
	enum { Q_SIZE = 10 };
	// private class members
	Node * front; // pointer to front of Queue
	Node * rear; // pointer to rear of Queue
	int items; // current number of items in Queue
	const int qsize; // maximum number of items in Queue
					 // preemptive definitions to prevent public copying
	Queue(const Queue & q) : qsize(0) { }
	Queue & operator=(const Queue & q) { return *this; }
public:
	Queue(int qs = Q_SIZE); // create queue with a qs limit
	~Queue();
	bool isempty() const;
	bool isfull() const;
	int queuecount() const;
	bool enqueue(const Item &item); // add item to end
	bool dequeue(Item &item); // remove item from front
};

#endif


======================= *.cpp ======================
// unchanged

// queue.cpp -- Queue and Customer methods

#include "queue.h"
#include <cstdlib> // (or stdlib.h) for rand()

// Queue methods

Queue::Queue(int qs) : qsize(qs)
{
	front = rear = NULL; // or nullptr
	items = 0;
}

Queue::~Queue()
{
	Node * temp;
	while (front != NULL) // while queue is not yet empty
	{
		temp = front; // save address of front item
		front = front->next;// reset pointer to next item
		delete temp; // delete former front
	}
}

bool Queue::isempty() const
{
	return items == 0;
}

bool Queue::isfull() const
{
	return items == qsize;
}

int Queue::queuecount() const
{
	return items;
}

// Add item to queue
bool Queue::enqueue(const Item & item)
{
	if (isfull())
		return false;
	Node * add = new Node; // create node
						   // on failure, new throws std::bad_alloc exception
	add->item = item; // set node pointers
	add->next = NULL; // or nullptr;
	items++;
	if (front == NULL) // if queue is empty,
		front = add; // place item at front
	else
		rear->next = add; // else place at rear
	rear = add; // have rear point to new node
	return true;
}

// Place front item into item variable and remove from queue
bool Queue::dequeue(Item & item)
{
	if (front == NULL)
		return false;
	item = front->item; // set item to first item in queue
	items--;
	Node * temp = front; // save location of first item
	front = front->next; // reset front to next item
	delete temp; // delete former first item
	if (items == 0)
		rear = NULL;
	return true;
}

// customer method
// when is the time at which the customer arrives
// the arrival time is set to when and the processing
// time set to a random value in the range 1 - 3
void Customer::set(long when)
{
	processtime = std::rand() % 3 + 1;
	arrive = when;
}


====================== main.cpp ==========================


// 12.5 - bank.cpp
// Find an average number of customers per hour that leads to average wait time of 1 minute

// This program prompts user to input the maximal size of queue and the maximal number of customers per hour
// Nested cycles check all combinations of queue size (0 to MAX) and customers per hour (0 to MAX).

#include <iostream>
#include <cstdlib> // for rand() and srand()
#include <ctime> // for time()
#include "queue.h"

const int MIN_PER_HR = 60;

// x = average time, in minutes, between customers
// return value is true if customer shows up this minute
bool newcustomer(double x)
{
	return (std::rand() * x / RAND_MAX < 1);
}

using namespace std;

int main()
{
	cout << "Case Study: Bank of Heather Automatic Teller\n\n";
	cout << "This program calculates an average value of customers per hour\nthat leads to an average wait time of 1 minunte" << endl;
	std::srand(std::time(0)); // random initializing of rand()
	cout << "Simulation hours are set for 100h" << endl;
	int hours = 100; // hours of simulation
	long cyclelimit = MIN_PER_HR * hours;
	int qs; // queue size
	int qs_max;
	cout << "Enter maximum size of queue: ";
	cin >> qs_max;
	cout << "Enter the maximal number of customers per hour: ";
	double max_perhour;
	cin >> max_perhour;
	cout << endl;
	for (qs = 1; qs < qs_max; qs++) // start from 1 person in queue
	{
		Queue line(qs); // line queue holds up to qs people
		int perhour; // average # of arrival per hour
		for (perhour = 1; perhour < max_perhour; perhour++) // start from 1 customer per hour
		{
			Item temp; // new customer data
			long turnaways = 0; // turned away by full queue
			long customers = 0; // joined the queue
			long served = 0; // served during the simulation
			long sum_line = 0; // cumulative line length
			int wait_time = 0; // time until autoteller is free
			long line_wait = 0; // cumulative time in line
			
			double min_per_cust = MIN_PER_HR / perhour; // average time between arrivals
			for (int cycle = 0; cycle < cyclelimit; cycle++)
			{
				if (newcustomer(min_per_cust)) // have newcomer
				{
					if (line.isfull())
						turnaways++;
					else
					{
						customers++;
						temp.set(cycle); // cycle = time of arrival
						line.enqueue(temp); // add newcomer to line
					}
				}
				if (wait_time <= 0 && !line.isempty())
				{
					line.dequeue(temp); // attend next customer
					wait_time = temp.ptime(); // for wait_time minutes
					line_wait += cycle - temp.when();
					served++;
				}
				if (wait_time > 0)
					wait_time--;
				sum_line += line.queuecount();
			}
			double awt = line_wait / served; // average wait time
			if (awt == 1) // set average waiting time tolerance to 0.05
			{
				cout << "Queue size: " << qs << endl;
				cout << "Number of customers per hour: " << perhour << endl;
				cout << " waitung time (min): " << awt << endl;
				cout << " customers accepted: " << customers << endl;
				cout << " customers served: " << served << endl;
				cout << " turnaways: " << turnaways << endl;
				cout << "average queue size: ";
				cout.precision(2);
				cout.setf(ios_base::fixed, ios_base::floatfield);
				cout << (double)sum_line / cyclelimit << endl;
				cout << endl;
			}
		}
	}
	cout << "Done!\n";
	return 0;
}

