============================== C++ =============================

//5.2 - Factorial (using assembly)

//Multiplication using 32-bit registers gives product which is stored in EDX:EAX.
// All numbers < 13 give product EDX:EAX = 0:(number).
//13! is the first number which requires to use EDX to store higher dword.
// It means, that the next step multiplicand must be EDX:EAX! 

#include <iostream>

extern "C" void factorial(long long * arr, int ArrSize);

int main()
{
	using namespace std;
	const int ArrSize = 14;
	long long arr[ArrSize];
	arr[1] = arr[0] = 1LL;
	factorial(arr, ArrSize);
	for (int i = 0; i < ArrSize; i++)
		cout << i << "! = " << arr[i] << endl;
	return 0;
}


===================== ASM ============================

.model flat, C

.code
factorial proc

push ebp
mov ebp, esp

mov esi, [ebp + 8]; arr
mov ecx, [ebp + 12]; ArrSize
add esi, 16; point to third member of array (long long)
mov ebx, 2;start from the 2nd member of array
L1:
cmp ebx, ecx
je L2
mov edx, 0
mov eax, [esi-8]
mul ebx
mov [esi], eax
add esi, 4
mov [esi], edx
add esi, 4
inc ebx
jmp L1
L2:

pop ebp
ret
factorial endp
end