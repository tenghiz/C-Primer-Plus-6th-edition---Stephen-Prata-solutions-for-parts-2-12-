============================== main.cpp ==================================

// 10.5 - 
// stacker.cpp -- testing the Stack class

#include <iostream>
#include <cctype> // or ctype.h
#include "stack.h"

int main()
{
	using namespace std;
	Stack st; // create an empty stack
	char ch;
	customer po;
	double total = 0;
	cout << "Please enter A to add a customer's payment,\n"
		<< "P to add payment to total, or Q to quit.\n";
	while (cin >> ch && toupper(ch) != 'Q')
	{
		while (cin.get() != '\n')
			continue;
		if (!isalpha(ch))
		{
			cout << '\a';
			continue;
		}
		switch (ch)
		{
		case 'A':
		case 'a': 
			cout << "Enter a name of customer: ";
			cin.getline(po.fullname, 35);
			cout << "Enter customer's payment: ";
			cin >> po.payment;
			if (st.isfull())
				cout << "stack already full\n";
			else
				st.push(po);
			break;
		case 'P':
		case 'p': 
			if (st.isempty())
			cout << "stack already empty\n";
			else
			{
				total += po.payment;
				st.pop(po);
				cout << "Payment of " << po.fullname << " was added to total\n";
				cout << "Total is " << total << endl;
			}
			break;
		}
		cout << "Please enter A to add a purchase order,\n"
			<< "P to process a PO, or Q to quit.\n";
	}
	cout << "Bye\n";
	return 0;
}

===================================== *.h ================================

#pragma once

// stack.h -- class definition for the stack ADT

#ifndef STACK_H_
#define STACK_H_

struct customer
{
	char fullname[35];
	double payment;
};

typedef customer Item;

class Stack
{
private:
	enum { MAX = 10 }; // constant specific to class
	Item items[MAX]; // holds stack items
	int top; // index for top stack item
public:
	Stack();
	bool isempty() const;
	bool isfull() const;
	// push() returns false if stack already is full, true otherwise
	bool push(const Item & item); // add item to stack
								  // pop() returns false if stack already is empty, true otherwise
	bool pop(Item & item); // pop top into item
};

#endif


================================= *.cpp =================================

// stack.cpp -- Stack member functions

#include "stack.h"

Stack::Stack() // create an empty stack
{
	top = 0;
}

bool Stack::isempty() const
{
	return top == 0;
}

bool Stack::isfull() const
{
	return top == MAX;
}

bool Stack::push(const Item & item)
{
	if (top < MAX)
	{
		items[top++] = item;
		return true;
	}
	else
		return false;
}

bool Stack::pop(Item & item)
{
	if (top > 0)
	{
		item = items[--top];
		return true;
	}
	else
		return false;
}