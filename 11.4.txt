===================== main.cpp ====================

// 11.4 - Use Friend operators instead of overloaded operators

#include <iostream>
#include "mytime3.h"

int main()
{
	using std::cout;
	using std::endl;
	Time aida(3, 35);
	Time tosca(2, 48);
	Time temp;
	cout << "Aida and Tosca:\n";
	cout << aida << "; " << tosca << endl;
	temp = aida + tosca; // operator+()
	cout << "Aida + Tosca: " << temp << endl;
	Time temp1 = aida - tosca;
	cout << "Aida minus Tosca: " << temp1 << endl;
	temp = aida* 1.17; // member operator*()
	cout << "Aida * 1.17: " << temp << endl;
	cout << "10.0 * Tosca: " << 10.0 * tosca << endl;
	return 0;
}

========================= *.h ========================

#pragma once

// mytime3.h -- Time class with friends

#ifndef MYTIME3_H_
#define MYTIME3_H_

#include <iostream>

class Time
{
private:
	int hours;
	int minutes;
public:
	Time();
	Time(int h, int m = 0);
	void AddMin(int m);
	void AddHr(int h);
	void Reset(int h = 0, int m = 0);
	//Time operator+(const Time & t) const;
	//Time operator-(const Time & t) const;
	Time operator*(double n) const;
	friend Time operator*(double m, const Time & t);
	friend Time operator+(const Time & t, const Time & s);
	friend Time operator-(const Time & t, const Time & s);
	friend std::ostream & operator<<(std::ostream & os, const Time & t);
};

#endif

============================ *.cpp =============================

// mytime3.cpp -- implementing Time methods

#include "mytime3.h"

Time::Time()
{
	hours = minutes = 0;
}

Time::Time(int h, int m)
{
	hours = h;
	minutes = m;
}

void Time::AddMin(int m)
{
	minutes += m;
	hours += minutes / 60;
	minutes %= 60;
}

void Time::AddHr(int h)
{
	hours += h;
}

void Time::Reset(int h, int m)
{
	hours = h;
	minutes = m;
}

//Time Time::operator+(const Time & t) const
//{
//	Time sum;
//	sum.minutes = minutes + t.minutes;
//	sum.hours = hours + t.hours + sum.minutes / 60;
//	sum.minutes %= 60;
//	return sum;
//}

// friend addition
Time operator+(const Time & t, const Time & s)
{
	Time sum;
	int minutes = t.minutes + s.minutes;
	int hours = t.hours + s.hours + minutes / 60;
	minutes %= 60;
	sum.hours = hours;
	sum.minutes = minutes;
	return sum;
}

//Time Time::operator-(const Time & t) const
//{
//	Time diff;
//	int tot1, tot2;
//	tot1 = t.minutes + 60 * t.hours;
//	tot2 = minutes + 60 * hours;
//	diff.minutes = (tot2 - tot1) % 60;
//	diff.hours = (tot2 - tot1) / 60;
//	return diff;
//}

Time operator-(const Time & t, const Time & s)
{
	Time diff;
	int tot1 = t.hours * 60 + t.minutes;
	int tot2 = s.hours * 60 + s.minutes;
	int min = tot1 - tot2;
	diff.hours = min / 60;
	diff.minutes = min % 60;
	return diff;
}

Time Time::operator*(double mult) const
{
	Time result;
	long totalminutes = hours * mult * 60 + minutes * mult;
	result.hours = totalminutes / 60;
	result.minutes = totalminutes % 60;
	return result;
}

// friend multiplicarion
Time operator*(double m, const Time & t)
{
	Time result;
	long totalminutes = t.hours * m * 60 + t.minutes * m;
	result.hours = totalminutes / 60;
	result.minutes = totalminutes % 60;
	return result;
}

std::ostream & operator<<(std::ostream & os, const Time & t)
{
	os << t.hours << " hours, " << t.minutes << " minutes";
	return os;
}