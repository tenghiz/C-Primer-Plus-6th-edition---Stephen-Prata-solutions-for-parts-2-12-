==================== *.h =================

#pragma once

// stock20.h -- augmented version

#ifndef STOCK20_H_
#define STOCK20_H_

#include <iostream>

using namespace std;

class Stock
{
private:
	char * company; // changed
	int shares;
	double share_val;
	double total_val;
	void set_tot() { total_val = shares * share_val; }
public:
	Stock(); // default constructor CHANGED
	Stock(char * co, long n = 0, double pr = 0.0); // changed
	Stock(const Stock & s); // provide copy constructor just in case
	Stock & operator=(const Stock & s); // provide assignement operator just in case
	~Stock(); // changed
	void buy(long num, double price);
	void sell(long num, double price);
	void update(double price);
	const Stock & topval(const Stock & s) const;

	// overload << operator
	friend ostream & operator<<(ostream & os, const Stock & s);
};

#endif

===================== *.cpp ==================

#include <iostream>
#include <cstring>
#include "stock20.h"

using namespace std;

// constructors
Stock::Stock() // default constructor
{
	char g[] = "no name";
	int z = strlen("no name");
	company = new char[z + 1];
	strcpy(company, g);
	shares = 0;
	share_val = 0.0;
	total_val = 0.0;
}

Stock::Stock(char * co, long n, double pr)
{
	int z = strlen(co);
	company = new char[z+1];
	strcpy(company, co);
	if (n < 0)
	{
		std::cout << "Number of shares can’t be negative; "
			<< company << " shares set to 0.\n";
		shares = 0;
	}
	else
		shares = n;
	share_val = pr;
	set_tot();
}

// class destructor
Stock::~Stock() // quiet class destructor
{
	delete[] company;
}

// add copy constructor
Stock::Stock(const Stock & s)
{
	int z = strlen(s.company);
	company = new char[z + 1];
	strcpy(company, s.company);
	shares = s.shares;
	share_val = s.share_val;
	total_val = s.total_val;
}

// assignment operator just in case
Stock & Stock::operator=(const Stock & s)
{
	if (this == &s)
		return *this;
	delete[] company;
	int z = strlen(s.company);
	company = new char[z + 1];
	strcpy(company, s.company);
	shares = s.shares;
	share_val = s.share_val;
	total_val = s.total_val;
	return *this;
}

// other methods
void Stock::buy(long num, double price)
{
	if (num < 0)
	{
		std::cout << "Number of shares purchased can’t be negative. "
			<< "Transaction is aborted.\n";
	}
	else
	{
		shares += num;
		share_val = price;
		set_tot();
	}
}

void Stock::sell(long num, double price)
{
	using std::cout;
	if (num < 0)
	{
		cout << "Number of shares sold can’t be negative. "
			<< "Transaction is aborted.\n";
	}
	else if (num > shares)
	{
		cout << "You can’t sell more than you have! "
			<< "Transaction is aborted.\n";
	}
	else
	{
		shares -= num;
		share_val = price;
		set_tot();
	}
}

void Stock::update(double price)
{
	share_val = price;
	set_tot();
}

const Stock & Stock::topval(const Stock & s) const
{
	if (s.total_val > total_val)
		return s;
	else
		return *this;
}

// overload << operator
ostream & operator<<(ostream & os, const Stock & s)
{
	os << "Company: " << s.company << endl;
	os << "Shares: " << s.shares << endl;
	os << "Share price: " << s.share_val << endl;
	os << "Total worth: " << s.total_val << endl;
	cout << endl;
	return os;
}

=================== main.cpp ======================

#include <iostream>
#include "stock20.h"

using namespace std;

const int STKS = 4;

int main()
{
	// create an array of initialized objects
	Stock stocks[STKS] = {
		Stock("NanoSmart", 12, 20.0),
		Stock("Boffo Objects", 200, 2.0),
		Stock("Monolithic Obelisks", 130, 3.25),
		Stock("Fleep Enterprises", 60, 6.5)
	};
	cout << "Stock holdings:\n";
	int st;
	for (st = 0; st < STKS; st++)
		cout << stocks[st];
	// set pointer to first element
	const Stock * top = &stocks[0];
	for (st = 1; st < STKS; st++)
		top = &top->topval(stocks[st]);
	// now top points to the most valuable holding
	cout << "\nMost valuable holding:\n";
	cout << *top;
	return 0;
}